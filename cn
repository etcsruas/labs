//1d parity check
#include <stdio.h>

int main(){
    int bits[256], parity;
    int i, size, count=0;
    
    printf("Enter the size of the bit array: ");
    scanf("%d", &size);
    printf("\n");
    
    printf("Enter the bit array: \n");
    for (i=0;i<size;i++){
        printf("Enter bit: ");
        scanf("%d", &bits[i]);
    }
    
    printf("Entered bit array is: ");
    for (i=0;i<size;i++){
        printf("%d", bits[i]);
    }
    printf("\n");
    
    for (i=0;i<size;i++){
        if (bits[i] == 1){
            count++;
        }
    }
    if (count%2 == 0){
        parity = 0;
    }
    else{
        parity = 1;
    }
    bits[size] = parity;
    printf("Parity bit is: %d\n", parity);
    printf("Modified bit array is: ");
    for (i=0;i<=size;i++){
        printf("%d", bits[i]);
    }
}

//2d parity check
#include <stdio.h>

int main(){
    int bits[256][256], row, col;
    int i, j, count=0;

    printf("Enter the number of rows: ");
    scanf("%d", &row);
    printf("Enter the number of columns: ");
    scanf("%d", &col);

    printf("Enter the bits: ");
    for (i=0;i<row;i++){
        for (j=0;j<col;j++){
            printf("Enter the bit: ");
            scanf("%d", &bits[i][j]);
        }
    }

    printf("Given bit array is: \n");
    for (i=0;i<row;i++){
        for (j=0;j<col;j++){
            printf("%d", bits[i][j]);
        }
        printf("\n");
    }

    //row parity
    for (i=0;i<row;i++){
        int rowParity = 0;
        for (j=0;j<col;j++){
            rowParity += bits[i][j];
        }
        bits[i][col] = rowParity%2;
    }

    //col parity
    for (j=0;j<row;j++){
        int colParity = 0;
        for (i=0;i<col;i++){
            colParity += bits[i][j];
        }
        bits[row][j] = colParity%2;
    }
    
    printf("Modified bit array is: \n");
    for (i=0;i<=row;i++){
        for (j=0;j<=col;j++){
            printf("%d", bits[i][j]);
        }
        printf("\n");
    }
}

//crc check
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define POLYLEN strlen(gen_poly)

char data[64], rem[32];
char gen_poly[] = "", poly10[] = "11000110101", poly16[] = "10001000000100001";
char poly8[] = "100000111", poly32[] = "100000001000000010010000111000110";
int data_len, i, j, k, e, c, ch;

void chooseGeneratingPolynomial(){
    printf("\n Press 1 for CRC-8"
            "\n Press 2 for CRC-10"
            "\n Press 3 for CRC-16"
            "\n Press 4 for CRC-32"
            "\n Choice: ");
    scanf("%d", &ch);

    switch(ch){
        case 1: strcpy(gen_poly, poly8); break;
        case 2: strcpy(gen_poly, poly10); break;
        case 3: strcpy(gen_poly, poly16); break;
        case 4: strcpy(gen_poly, poly32); break;
        default: printf("Invalid Choice");
    }

    printf("\n Generating polynomial is: %s", gen_poly);
}

void xor(){
    for (c=1;c<POLYLEN;c++){
        rem[c] = ((rem[c] == gen_poly[c])?'0':'1');
    }
}

void remCal(){
    for (e=0;e<POLYLEN;e++)
        rem[e] = data[e];
    do{
        if (rem[0] == '1')
            xor();
        for (c=0;c<POLYLEN-1;c++)
            rem[c] = rem[c+1];
        rem[c] = data[e++];
    }
    while (e <= data_len+POLYLEN+1);
}

void sender(){
    data_len = strlen(data);
    for (i=data_len;i<data_len+POLYLEN-1;i++)
        data[i] = '0';
    printf("\n \n Modified data is: %s", data);
    remCal();
    printf("\n Remainder is: %s", rem);
    for (i=data_len;i<data_len+POLYLEN-1;i++)
        data[i] = rem[i-data_len];
    printf("\n Final codeword being transmitted is: %s", data);
}

int checkError(){
    remCal();
    for (i=0;(i<POLYLEN-1) && (rem[i] != '1'); i++);
    if (i<POLYLEN-1)
        printf("\n Error detected data processing aborted");
    else
        printf("\n No error detected proceed to data processing");
    return 0;
}

void receiver(){
    printf("\n Code received"
            "\n Press 0 to detect error"
            "\n Press 1 to introduce errors: ");
    scanf("%d", &ch);
    if (ch == 0)
        checkError();
    else if (i == 1){
        do{
            do{
                printf("\n Enter the position where error is to be inserted: ");
                scanf("%d", &i);
            }
            while (i==0||i>data_len+POLYLEN-1);
            data[i-1] = (data[i-1]=='0')?'1':'0';
            printf("\n Press 1 to introduce more errors"
                    "\n Press 0 to continue"
                    "\n Option: ");
            scanf("%d", &ch);
        }
        while(ch==1);
        printf("\n Data at receiver: %s", data);
        checkError();
    }
    else{
        printf("\n Invalid Option");
    }
}

int main(){
    int data_size;
    printf("\n Enter the data size (max 32 bits)");
    scanf("%d", &data_size);
    printf("\n Enter the %d-bit data: ", data_size);
    scanf("%s", data);
    chooseGeneratingPolynomial();
    sender();
    receiver();
    return 0;
}

//crc ver2
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_DATA_SIZE 32
#define MAX_POLY_SIZE 64

char data[MAX_DATA_SIZE + MAX_POLY_SIZE];
char rem[MAX_POLY_SIZE];
char gen_poly[MAX_POLY_SIZE]; // Define gen_poly with maximum size
int data_len, ch;

void chooseGeneratingPolynomial() {
    printf("\n Press 1 for CRC-8"
           "\n Press 2 for CRC-10"
           "\n Press 3 for CRC-16"
           "\n Press 4 for CRC-32"
           "\n Choice: ");
    scanf("%d", &ch);

    switch (ch) {
        case 1:
            strcpy(gen_poly, "100000111"); // CRC-8 polynomial
            break;
        case 2:
            strcpy(gen_poly, "11000110101"); // CRC-10 polynomial
            break;
        case 3:
            strcpy(gen_poly, "10001000000100001"); // CRC-16 polynomial
            break;
        case 4:
            strcpy(gen_poly, "100000001000000010010000111000110"); // CRC-32 polynomial
            break;
        default:
            printf("Invalid Choice");
    }

    printf("\n Generating polynomial is: %s", gen_poly);
}

void xor() {
    for (int c = 1; c < strlen(gen_poly); c++) {
        rem[c] = ((rem[c] == gen_poly[c]) ? '0' : '1');
    }
}

void remCal() {
    int e, c;
    for (e = 0; e < strlen(gen_poly); e++)
        rem[e] = data[e];
    do {
        if (rem[0] == '1')
            xor();
        for (int c = 0; c < strlen(gen_poly) - 1; c++)
            rem[c] = rem[c + 1];
        rem[c] = data[e++];
    }
    while (e <= data_len + strlen(gen_poly) + 1);
}

void sender() {
    data_len = strlen(data);
    for (int i = data_len; i < data_len + strlen(gen_poly) - 1; i++)
        data[i] = '0';
    printf("\n \n Modified data is: %s", data);
    remCal();
    printf("\n Remainder is: %s", rem);
    for (int i = data_len; i < data_len + strlen(gen_poly) - 1; i++)
        data[i] = rem[i - data_len];
    printf("\n Final codeword being transmitted is: %s", data);
}

int checkError() {
    remCal();
    int errorDetected = 0;
    for (int i = 0; i < strlen(gen_poly) - 1; i++) {
        if (rem[i] != '0') {
            errorDetected = 1;
            break;
        }
    }
    if (errorDetected)
        printf("\n Error detected, data processing aborted");
    else
        printf("\n No error detected, proceed to data processing");
    return errorDetected;
}


void receiver() {
    printf("\n Code received"
           "\n Press 0 to detect error"
           "\n Press 1 to introduce errors: ");
    scanf("%d", &ch);
    if (ch == 0)
        checkError();
    else if (ch == 1) { // Corrected condition check
        do {
            int i;
            printf("\n Enter the position where error is to be inserted: ");
            scanf("%d", &i);
            if (i > 0 && i <= data_len + strlen(gen_poly) - 1) { // Validate position
                data[i - 1] = (data[i - 1] == '0') ? '1' : '0';
                printf("\n Press 1 to introduce more errors"
                       "\n Press 0 to continue"
                       "\n Option: ");
                scanf("%d", &ch);
            } else {
                printf("\nInvalid position. Please enter a position between 1 and %d.", data_len + strlen(gen_poly) - 1);
            }
        } while (ch == 1);
        printf("\n Data at receiver: %s", data);
        checkError();
    } else {
        printf("\n Invalid Option");
    }
}

int main() {
    int data_size;
    printf("\n Enter the data size (max %d bits): ", MAX_DATA_SIZE);
    scanf("%d", &data_size);
    if (data_size > MAX_DATA_SIZE) {
        printf("\n Data size exceeds the maximum limit. Please enter a value less than or equal to %d.", MAX_DATA_SIZE);
        return 1;
    }
    printf("\n Enter the %d-bit data: ", data_size);
    scanf("%s", data);
    if (strlen(data) != data_size) {
        printf("\n Data size does not match the specified size. Please enter exactly %d bits.", data_size);
        return 1;
    }
    chooseGeneratingPolynomial();
    sender();
    receiver();
    return 0;
}
// neighbour determination table

#include <stdio.h>
#include <stdlib.h>
#include <math.h>

int i, j, n;
int x[15], y[15];
float distance[15][15];

void createNetwork(){
    int x_range, y_range;
    printf("Enter the number of nodes (max 15): ");
    scanf("%d", &n);    
    printf("Enter X-coordinate range: ");
    scanf("%d", &x_range);
    printf("Enter Y-coordinate range: ");
    scanf("%d", &y_range);  
    srand(time(NULL));
    for (i=0;i<n;i++){
        x[i] = 1 + rand() % x_range;
        y[i] = 1 + rand() % y_range;
    }
    printf("\nX\t Y\t \n");
    for (i=0;i<n;i++)
        printf("(%d, \t%d)\n", x[i], y[i]);
}

void computeDistance(){
    for (i=0;i<n;i++)
        for (j=0;j<n;j++)
            distance[i][j] = sqrt(((x[j]-x[i])*(x[j]-x[i]))+((y[j]-y[i])*(y[j]-y[i])));
    for (i=0;i<n;i++)
            printf("\t%d\t",i+1);
    printf("\n");
    for (i=0;i<n;i++){
        printf("%d\t",i+1);
        for (j=0;j<n;j++)
            printf("%f \t",distance[i][j]);
        printf("\n");
        }
}

void findNeighbour(){
    float range;
    printf("\nEnter the neighbour range: ");
    scanf("%f", &range);
    for (i=0;i<n;i++){
        printf("\nNeighbours of %d are:\t",i+1);
        for (j=0;j<n;j++){
            if (i==j){
                continue;
            }
            if (range >= distance[i][j])
                printf("%d: %f\t",j+1,distance[i][j]);
        }
    }
}

int main(){
    createNetwork();
    computeDistance();
    findNeighbour();
    return 0;
}

//distance vector routing
#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

int findShortestPath(int G[6][6], int vertices, int Edges, int edge[20][2], int Source) {
    int i, j, u, v, k, distance[20], parent[20];
    int flag = 1;
    for (i = 0; i < vertices; i++)
        distance[i] = INT_MAX, parent[i] = -1;
    distance[Source - 1] = 0;
    for (i = 0; i < vertices - 1; i++) {
        for (k = 0; k < Edges; k++) {
            u = edge[k][0], v = edge[k][1];
            if (distance[u] != INT_MAX && distance[u] + G[u][v] < distance[v]) {
                distance[v] = distance[u] + G[u][v];
                parent[v] = u;
            }
        }
    }
    for (k = 0; k < Edges; k++) {
        u = edge[k][0], v = edge[k][1];
        if (distance[u] != INT_MAX && distance[u] + G[u][v] < distance[v])
            flag = 0;
    }
    printf("Destination\tCost\tPath\n");
    if (flag) {
        for (i = 0; i < vertices; i++) {
            int nodes[10], b = 9, next;
            nodes[b--] = i;
            next = parent[i];
            nodes[b--] = next;
            while (next != -1) {
                next = parent[next];
                nodes[b--] = next;
            }
            if (distance[i] == INT_MAX)
                printf("%d\t\t%d\t", i, -1);
            else
                printf("%d\t\t%d\t", i, distance[i]);
            for (int h = b + 1; h < 10; h++) {
                if (nodes[h] == -1) {
                    for (int g = h + 1; g < 10; g++) {
                        if (g == 9)
                            printf("%d", nodes[g]);
                        else
                            printf("%d-->", nodes[g]);
                    }
                    break;
                }
            }
            printf("\n");
        }
    }
    return flag;
}

int main() {
    int Vertices = 6, edge[20][2];
    int i, j, k = 0;
    int graph[6][6] = {
        {0, 1, 5, 0, 0, 0},
        {1, 0, 3, 4, 0, 0},
        {5, 3, 0, 5, 9, 0},
        {0, 4, 5, 0, 2, 6},
        {0, 0, 9, 2, 0, 3},
        {0, 0, 0, 6, 3, 0}};
    printf("The Adjacency Matrix representation of graph\n");
    for (i = 0; i < Vertices; i++) {
        for (j = 0; j < Vertices; j++) {
            printf("%d\t", graph[i][j]);
            if (graph[i][j] != 0)
                edge[k][0] = i, edge[k++][1] = j;
        }
        printf("\n");
    }
    for (i = 0; i < Vertices; i++) {
        printf("\n-------------------------\n");
        printf("\tSource vertex %d\n", i);
        findShortestPath(graph, Vertices, k, edge, i + 1);
    }
    return 0;
}

//all  transmission protocols
#include <stdio.h>
#include <stdlib.h>

int main(){
  int val;
  while(1){
    printf("1. Stop and Wait Protocol\n"
    "2. Go back N Protocol\n"
    "3. Selective Repeat Protocol\n"
    "Select one: ");
    scanf("%d", &val);
    switch(val){
      case 1: stopAndWait(); break;
      case 2: goBackN(); break;
      case 3: selectiveRepeat(); break;
      default: return(0);
    }
  }
  return(0);
}

void stopAndWait(){
  int totalFrames, receivedFrame, i = 0;
  printf("Enter the total number of frames: ");
  scanf("%d", &totalFrames);
  
  while(i != totalFrames){
    printf("\nEnter received frame: ");
    scanf("%d", &receivedFrame);
    
    if (receivedFrame == i+1){
      printf("Transmitting.... ACK to frame %d\n", receivedFrame);
      i++;
    }
    else{
      printf("Negative ACK.... to frame %d\n", i+1); // Added newline character
    }
  }
}


void goBackN(){
  int windowSize, sent = 0, ack, i;
  printf("Enter window size: ");
  scanf("%d", &windowSize);
  
  while(1){
    for(i = 0; i < windowSize; i++){
      printf("Frame %d has been transmitted.\n", sent);
      sent++;
      if(sent == windowSize)
        break;
    }
    printf("\nPlease enter the last Acknowledgement received: ");
    scanf("%d", &ack);
    
    if(ack == windowSize)
      break;
    else
      sent = ack;
  }
}


void selectiveRepeat(){
  int totalFrames, receivedFrames, frame, i, j;
  printf("Enter the total number of frames: ");
  scanf("%d", &totalFrames);
  
  printf("Sending frames: ");
  for(i = 0; i < totalFrames; i++){
    printf("%d ", i+1);
  }
  
  printf("\nEnter the number of frames received: ");
  scanf("%d", &receivedFrames);
  
  int received[totalFrames];
  printf("\nEnter received frames: ");
  for(i = 0; i < receivedFrames; i++){
    scanf("%d", &received[i]);
  }
  
  printf("Retransmitting missing frames: ");
  for(i = 0; i < totalFrames; i++){
    int found = 0;
    for(j = 0; j < receivedFrames; j++){
      if(received[j] == i+1){
        found = 1;
        break;
      }
    }
    if(!found){
      printf("%d ", i+1);
    }
  }
}

#lab6 client server
#server side
import socket

HOST = '127.0.0.1'  # Standard loopback interface address (localhost)
PORT = 65432        # Port to listen on (non-privileged ports are > 1023)

with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
    s.bind((HOST, PORT))
    s.listen()
    conn, addr = s.accept()
    with conn:
        print('Connected by', addr)
        while True:
            data = conn.recv(1024)
            if not data:
                break
            conn.sendall(data)

#client side
import socket

HOST = '127.0.0.1'  # The server's hostname or IP address
PORT = 65432        # The port used by the server
message = b"Hello World"
with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
    s.connect((HOST, PORT))
    s.send(message)	
    data = s.recv(1024)

print('Received', repr(data))

#lab7 chat room
#server side
import time, socket, sys
print('Setup Server...')
time.sleep(1)
#Get the hostname, IP Address from socket and set Port
soc = socket.socket()
host_name = socket.gethostname()
ip = socket.gethostbyname(host_name)
port = 1234
soc.bind((host_name, port))
print(host_name, '({})'.format(ip))
name = input('Enter name: ')
soc.listen(1) #Try to locate using socket
print('Waiting for incoming connections...')
connection, addr = soc.accept()
print("Received connection from ", addr[0], "(", addr[1], ")\n")
print('Connection Established. Connected From: {}, ({})'.format(addr[0], addr[0]))
#get a connection from client side
client_name = connection.recv(1024)
client_name = client_name.decode()
print(client_name + ' has connected.')
print('Press [bye] to leave the chat room')
connection.send(name.encode())
while True:
    message = input('Me > ')
    if message == '[bye]':
        message = 'Bye, leaving the chat room!'
        connection.send(message.encode())
        print("\n")
        break
    connection.send(message.encode())
    message = connection.recv(1024)
    message = message.decode()
    print(client_name, '>', message)

#client side
import time, socket, sys
print('Client Server...')
time.sleep(1)
#Get the hostname, IP Address from socket and set Port
soc = socket.socket()
shost = socket.gethostname()
ip = socket.gethostbyname(shost)
#get information to connect with the server
print(shost, '({})'.format(ip))
server_host = input('Enter server\'s IP address:')
name = input('Enter Client\'s name: ')
port = 1234
print('Trying to connect to the server: {}, ({})'.format(server_host, port))
time.sleep(1)
soc.connect((server_host, port))
print("Connected...\n")
soc.send(name.encode())
server_name = soc.recv(1024)
server_name = server_name.decode()
print('{} has joined...'.format(server_name))
print('Enter [bye] to exit.')
while True:
    message = soc.recv(1024)
    message = message.decode()
    print(server_name, ">", message)
    message = input("Me > ")
    if message == "[bye]":
        message = "Leaving the Chat room"
        soc.send(message.encode())
        print("\n")
        break
    soc.send(message.encode())

